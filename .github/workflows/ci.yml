name: 🔍 Ansible CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  ANSIBLE_VERSION: ">=2.15.0"
  PYTHON_VERSION: "3.11"

jobs:
  lint:
    name: 🧹 Lint & Syntax Check
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: 📦 Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: 🔧 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        ansible-galaxy collection install -r requirements.yml
        
    - name: 🔍 Ansible Lint
      run: |
        ansible-lint --version
        ansible-lint .
        
    - name: ✅ Syntax Check
      run: |
        ansible-playbook --syntax-check Az-Win22-Win-playbook.yml
        
    - name: 📋 Inventory Check
      run: |
        ansible-inventory -i inventory/hosts.ini --list
        
  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
      
    - name: 🔐 Check for secrets
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified
        
    - name: 📝 Check for sensitive files
      run: |
        echo "🔍 Checking for sensitive patterns..."
        
        # Check for potential secrets in files
        if grep -r -i "password.*=" . --exclude-dir=.git --exclude="*.md" | grep -v "ansible_password=.*{{"; then
          echo "❌ Found hardcoded passwords!"
          exit 1
        fi
        
        if grep -r -E "[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}" . --exclude-dir=.git --exclude="*.md" | grep -v "{{"; then
          echo "❌ Found hardcoded UUIDs (potential Azure IDs)!"
          exit 1
        fi
        
        if grep -r -E "[A-Za-z0-9+/]{40,}" . --exclude-dir=.git --exclude="*.md" | grep -v "{{" | grep -v "template"; then
          echo "❌ Found potential API keys or secrets!"
          exit 1
        fi
        
        echo "✅ No sensitive data found in files"
        
  validate:
    name: 🧪 Validate Configuration
    runs-on: ubuntu-latest
    needs: [lint]
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: 🔧 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        ansible-galaxy collection install -r requirements.yml
        
    - name: 🔑 Create test vault file
      run: |
        cat > group_vars/win/vault.yml << EOF
        azure_subscription_id: "test-subscription-id"
        azure_tenant_id: "test-tenant-id"
        azure_client_id: "test-client-id"
        azure_client_secret: "test-client-secret"
        storage_account_key: "test-storage-key"
        windows_admin_password: "test-password"
        crystal_reports_product_key: "test-product-key"
        EOF
        
        ansible-vault encrypt group_vars/win/vault.yml --vault-password-file <(echo "test-vault-password")
        
    - name: ✅ Validate playbook with test data
      run: |
        echo "test-vault-password" > .vault_pass
        ansible-playbook Az-Win22-Win-playbook.yml \
          -e "server_type=web" \
          --check \
          --diff \
          --vault-password-file .vault_pass || true
        
        ansible-playbook Az-Win22-Win-playbook.yml \
          -e "server_type=job" \
          --check \
          --diff \
          --vault-password-file .vault_pass || true
          
        ansible-playbook Az-Win22-Win-playbook.yml \
          -e "server_type=db" \
          --check \
          --diff \
          --vault-password-file .vault_pass || true
          
    - name: 🧹 Cleanup
      run: |
        rm -f .vault_pass group_vars/win/vault.yml
        
  documentation:
    name: 📚 Documentation Check
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
      
    - name: 📝 Check documentation completeness
      run: |
        echo "🔍 Checking documentation..."
        
        # Check if critical files exist
        required_files=("README.md" "LICENSE" "SECURITY_CHECKLIST.md" "requirements.yml" "requirements.txt")
        for file in "${required_files[@]}"; do
          if [[ ! -f "$file" ]]; then
            echo "❌ Missing required file: $file"
            exit 1
          fi
        done
        
        # Check if README contains critical sections
        required_sections=("Installation" "Configuration" "Usage" "Security" "Contributing")
        for section in "${required_sections[@]}"; do
          if ! grep -q "$section" README.md; then
            echo "❌ README missing section: $section"
            exit 1
          fi
        done
        
        echo "✅ Documentation checks passed"
        
    - name: 🔗 Check links in README
      uses: gaurav-nelson/github-action-markdown-link-check@v1
      with:
        use-quiet-mode: 'yes'
        use-verbose-mode: 'yes'
        config-file: '.github/mlc_config.json'
        
  release:
    name: 🚀 Release Check
    runs-on: ubuntu-latest
    needs: [lint, security, validate, documentation]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
      
    - name: 🏷️ Check if release needed
      id: check_release
      run: |
        # Check if version tag exists for this commit
        if git tag --points-at HEAD | grep -q "^v"; then
          echo "release_needed=false" >> $GITHUB_OUTPUT
          echo "📋 Release tag already exists for this commit"
        else
          echo "release_needed=true" >> $GITHUB_OUTPUT
          echo "🏷️ No release tag found - release may be needed"
        fi
        
    - name: 📊 Generate changelog
      if: steps.check_release.outputs.release_needed == 'true'
      run: |
        echo "📝 Recent changes:" > CHANGELOG_TEMP.md
        echo "" >> CHANGELOG_TEMP.md
        git log --oneline --since="1 month ago" --pretty=format:"- %s" >> CHANGELOG_TEMP.md
        
        echo "📋 Changelog preview:"
        cat CHANGELOG_TEMP.md